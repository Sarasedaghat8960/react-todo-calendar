{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\githup\\\\React\\\\TodoCalender\\\\react-todo-calendar\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfDay';\nimport getDay from 'date-fns/getDay';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport React, { useState, useEffect, Component } from 'react';\nimport DatePicker, { registerLocale } from 'react-datepicker';\nimport sv from \"date-fns/locale/sv\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TodoList from './TodoList';\nimport { v4 } from 'uuid';\nimport moment from 'moment';\nimport Form from './Form';\nimport axios from 'axios';\nimport { lastDayOfMonth } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLocale(\"sv\", sv);\nconst locales = {\n  \"sv\": sv\n};\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales\n});\nconst LocalStorage = 'TodoApp';\n\nfunction App() {\n  _s();\n\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    start: \"\",\n    done: false\n  });\n  const [allEvents, setAllEvents] = useState([]);\n  const [allHolidays, setAllHolidays] = useState([]);\n  const [localStor, setLocalStor] = useState([]);\n  let count = 0;\n  let click = 0;\n\n  function eventStyleGetter(allEvents) {\n    console.log(allEvents.title);\n\n    if (allEvents.holiday) {\n      var backgroundColor = 'red';\n    }\n\n    var style = {\n      backgroundColor: backgroundColor,\n      borderRadius: '0px',\n      opacity: 0.8,\n      color: 'black',\n      border: '0px',\n      display: 'block'\n    };\n    return {\n      style: style\n    };\n  } // //Holidays  API ?????????????\n\n\n  useEffect(() => {\n    let year = moment(\"2021\").format('YYYY');\n    axios(`https://sholiday.faboul.se/dagar/v2.1/` + year).then(response => {\n      const holDay = response.data.dagar.filter(holiday => holiday.helgdag).map(function (holidayEvents) {\n        return {\n          title: holidayEvents.helgdag,\n          start: holidayEvents.datum,\n          id: v4(),\n          done: true,\n          Holiday: 'Ja'\n        };\n      });\n      console.log('holDay', holDay);\n      setAllEvents(holDay);\n      console.log('allEvents ', allEvents);\n    });\n  }, [count]); // Store events to Local storage \n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LocalStorage));\n    console.log('storedToDoes:', storedTodos);\n    if (storedTodos) setAllEvents(storedTodos);\n    console.log('saved storage', localStorage.getItem(LocalStorage));\n  }, [click]);\n  useEffect(() => {\n    localStorage.setItem(LocalStorage, JSON.stringify(allEvents));\n    console.log('localstorage', localStorage.getItem(LocalStorage));\n  }, [allEvents]); //Function for adding new event on clicking Add Event button \n\n  function handleAddEvent() {\n    if (newEvent.title) {\n      setAllEvents(prevAllEvents => {\n        return [...prevAllEvents, {\n          title: newEvent.title,\n          start: newEvent.start,\n          id: v4(),\n          workDay: 'Ja',\n          done: false\n        }];\n      });\n      click++;\n    }\n  } //Function for deleting done  events on clickind clear Event button \n\n\n  const handleClearEvent = () => {\n    const clearDoneEvent = allEvents.filter(clearEvents => !clearEvents.done);\n    setAllEvents(clearDoneEvent);\n  }; // Function for changing the events status to done \n\n\n  function toggleTodo(id) {\n    const toggleEvents = [...allEvents];\n    const doneEvent = toggleEvents.find(doneEvent => doneEvent.id === id);\n    doneEvent.done = !doneEvent.done;\n    setAllEvents(toggleEvents);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      newEvent: newEvent,\n      handleAddEvent: handleAddEvent,\n      setNewEvent: setNewEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: allEvents,\n      startAccessor: \"start\",\n      endAccessor: \"start\",\n      style: {\n        height: 500,\n        margin: \"150px\"\n      },\n      value: allEvents.title,\n      eventPropGetter: eventStyleGetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '100px',\n        width: '80%',\n        boxShadow: '10px 10px 10px 10px black',\n        background: 'lightgray',\n        fontSize: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '20px',\n          boxShadow: '5px 5px 5px 5px black'\n        },\n        children: [allEvents.filter(allEvents => !allEvents.done).length, \" left to do\", console.log(allEvents)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        allEvents: allEvents.filter(events => events.Work),\n        toggleTodo: toggleTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearEvent,\n        style: {\n          margin: '100px',\n          width: '50%',\n          boxShadow: '10px 10px 10px 10px black',\n          fontWeight: 'bold',\n          fontSize: '20px'\n        },\n        children: \" Clear Done Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Q3F60+35FC0nPr1njOF+FET9ERg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/githup/React/TodoCalender/react-todo-calendar/src/App.js"],"names":["Calendar","dateFnsLocalizer","format","parse","startOfWeek","getDay","React","useState","useEffect","Component","DatePicker","registerLocale","sv","TodoList","v4","moment","Form","axios","lastDayOfMonth","locales","localizer","LocalStorage","App","newEvent","setNewEvent","title","start","done","allEvents","setAllEvents","allHolidays","setAllHolidays","localStor","setLocalStor","count","click","eventStyleGetter","console","log","holiday","backgroundColor","style","borderRadius","opacity","color","border","display","year","then","response","holDay","data","dagar","filter","helgdag","map","holidayEvents","datum","id","Holiday","storedTodos","JSON","localStorage","getItem","setItem","stringify","handleAddEvent","prevAllEvents","workDay","handleClearEvent","clearDoneEvent","clearEvents","toggleTodo","toggleEvents","doneEvent","find","height","margin","marginLeft","width","boxShadow","background","fontSize","fontWeight","length","events","Work"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport {Calendar , dateFnsLocalizer} from 'react-big-calendar';\r\nimport format from 'date-fns/format';\r\nimport parse from 'date-fns/parse';\r\nimport startOfWeek from 'date-fns/startOfDay';\r\nimport getDay from 'date-fns/getDay';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport React, {useState, useEffect,  Component } from 'react';\r\nimport DatePicker ,{registerLocale} from 'react-datepicker';\r\nimport sv from \"date-fns/locale/sv\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport TodoList from './TodoList';\r\nimport { v4 } from 'uuid';\r\nimport moment from 'moment';\r\nimport Form from './Form';\r\nimport axios from 'axios'\r\nimport { lastDayOfMonth } from 'date-fns';\r\nregisterLocale(\"sv\", sv);\r\n\r\n\r\nconst locales = {\r\n\r\n  \"sv\" :sv\r\n}\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales\r\n})\r\n \r\n\r\n\r\nconst LocalStorage ='TodoApp'\r\n\r\n  \r\n\r\n function App() {\r\n\r\n   const [newEvent, setNewEvent] = useState({title:\"\", start:\"\"  , done:false })\r\n   const [allEvents, setAllEvents] = useState([])\r\n   const [allHolidays, setAllHolidays] = useState([])\r\n   const [localStor,setLocalStor]=useState([])\r\n   let count=0\r\n   let click=0\r\n   \r\n \r\n   function eventStyleGetter(allEvents) {\r\n    console.log(allEvents.title);\r\n    if(allEvents.holiday){\r\n       var backgroundColor = 'red';\r\n    }\r\n   \r\n    var style = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: '0px',\r\n        opacity: 0.8,\r\n        color: 'black',\r\n        border: '0px',\r\n        display: 'block'\r\n    };\r\n    return {\r\n        style: style\r\n    };\r\n  }\r\n\r\n\r\n// //Holidays  API ?????????????\r\n\r\nuseEffect(() => {\r\n  let year=moment(\"2021\").format('YYYY')\r\n  axios(`https://sholiday.faboul.se/dagar/v2.1/`+ year)\r\n  .then(response => {\r\n  \r\n   const holDay=response.data.dagar.filter(holiday=>holiday.helgdag)\r\n   .map(function(holidayEvents){\r\n     return{ title:holidayEvents.helgdag , start: holidayEvents.datum , id:v4() , done:true ,Holiday:'Ja' }\r\n   })\r\n   console.log('holDay',holDay);\r\n   setAllEvents(holDay) \r\n     console.log('allEvents ', allEvents)\r\n      \r\n          });\r\n  },[count]) \r\n\r\n\r\n\r\n// Store events to Local storage \r\n\r\n useEffect(()=>{\r\n\r\n  const storedTodos=JSON.parse(localStorage.getItem(LocalStorage))\r\n  console.log('storedToDoes:',storedTodos);\r\n  if (storedTodos)\r\n   setAllEvents(storedTodos)\r\n   console.log('saved storage',localStorage.getItem(LocalStorage));\r\n  \r\n},[click])\r\n  \r\n\r\n\r\n useEffect(()=>{\r\n  localStorage.setItem(LocalStorage , JSON.stringify(allEvents))\r\n   console.log('localstorage',localStorage.getItem(LocalStorage));\r\n\r\n },[allEvents])\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Function for adding new event on clicking Add Event button \r\nfunction handleAddEvent(){\r\n   if(newEvent.title){\r\n      setAllEvents(prevAllEvents =>{\r\n      return [...prevAllEvents , {title:newEvent.title,  start:newEvent.start  ,id:v4() , workDay:'Ja', done:false}]\r\n      })\r\n   click++   \r\n   } \r\n}\r\n\r\n\r\n//Function for deleting done  events on clickind clear Event button \r\n\r\nconst handleClearEvent = ()=>{\r\n  const clearDoneEvent=allEvents.filter(clearEvents=>!clearEvents.done)\r\n  setAllEvents(clearDoneEvent)\r\n}\r\n\r\n// Function for changing the events status to done \r\nfunction toggleTodo(id){\r\n  const toggleEvents=[... allEvents]\r\n  \r\n  const doneEvent=toggleEvents.find(doneEvent=> doneEvent.id ===id )\r\n  doneEvent.done =! doneEvent.done\r\n  setAllEvents(toggleEvents)\r\n}\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Form  newEvent={newEvent} handleAddEvent={handleAddEvent} setNewEvent={setNewEvent}/>\r\n      <Calendar localizer={localizer} events={allEvents}  \r\n           startAccessor =\"start\" endAccessor=\"start\" style={{height:500 , margin:\"150px\"}} value={allEvents.title} eventPropGetter={eventStyleGetter}\r\n      />\r\n      <div style={{marginLeft:'100px' ,width:'80%' ,boxShadow:'10px 10px 10px 10px black',background:'lightgray',fontSize:'20px' }}>\r\n          <div style={{fontWeight:'bold',fontSize:'20px' ,boxShadow:'5px 5px 5px 5px black'}}>\r\n                {allEvents.filter(allEvents=>!allEvents.done).length} left to do \r\n                {console.log(allEvents)}\r\n          \r\n          </div>\r\n          <br/>\r\n          < TodoList allEvents={allEvents.filter(events=>events.Work)} toggleTodo={toggleTodo}  />\r\n          <button onClick={handleClearEvent} style={{margin:'100px' ,width:'50%' ,boxShadow:'10px 10px 10px 10px black',\r\n            fontWeight:'bold',  fontSize:'20px' }}> Clear Done Events\r\n          </button>\r\n          <br/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}